// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`middleware Should accept mixed errors/responses in batches 1`] = `
Array [
  Object {
    "data": Object {
      "foo": "bar",
    },
  },
  Object {
    "data": null,
    "errorInfo": null,
    "errorMessage": "Not Found",
    "errorType": "NotFound",
  },
]
`;

exports[`middleware Should fail when the response is not an array but the event is 1`] = `[Error: BatchInvoke: The response does not match the request payload]`;

exports[`middleware Should fail when the response length does not match the event length 1`] = `[Error: BatchInvoke: The response does not match the request payload]`;

exports[`middleware Should handle a GraphQlError 1`] = `
Object {
  "data": Object {
    "some": "data",
  },
  "errorInfo": Object {
    "info": "value",
  },
  "errorMessage": "Error message",
  "errorType": "Error",
}
`;

exports[`middleware Should handle a GraphQlError response 1`] = `
Object {
  "data": Object {
    "some": "data",
  },
  "errorInfo": Object {
    "info": "value",
  },
  "errorMessage": "Returned Error message",
  "errorType": "ReturnedError",
}
`;

exports[`middleware Should handle a returned GraphQlError with async 1`] = `
Object {
  "data": Object {
    "some": "data",
  },
  "errorInfo": Object {
    "info": "value",
  },
  "errorMessage": "Returned Error message",
  "errorType": "ReturnedError",
}
`;

exports[`middleware Should handle a thrown GraphQlError 1`] = `
Object {
  "data": Object {
    "some": "data",
  },
  "errorInfo": Object {
    "info": "value",
  },
  "errorMessage": "Thrown Error message",
  "errorType": "Thrown Error",
}
`;

exports[`middleware Should handle a thrown GraphQlError with async 1`] = `
Object {
  "data": Object {
    "some": "data",
  },
  "errorInfo": Object {
    "info": "value",
  },
  "errorMessage": "Thrown Error message",
  "errorType": "Thrown Error",
}
`;

exports[`middleware Should reject the whole batch when returning an error in batch 1`] = `
Array [
  Object {
    "data": null,
    "errorInfo": null,
    "errorMessage": "Internal Error",
    "errorType": "NotFoundInternal Error",
  },
  Object {
    "data": null,
    "errorInfo": null,
    "errorMessage": "Internal Error",
    "errorType": "NotFoundInternal Error",
  },
]
`;

exports[`middleware Should reject the whole batch when throwing an error in batch 1`] = `
Array [
  Object {
    "data": null,
    "errorInfo": null,
    "errorMessage": "Internal Error",
    "errorType": "Internal Error",
  },
  Object {
    "data": null,
    "errorInfo": null,
    "errorMessage": "Internal Error",
    "errorType": "Internal Error",
  },
]
`;

exports[`middleware Should reject the whole batch when throwing an error in batch with async 1`] = `
Array [
  Object {
    "data": null,
    "errorInfo": null,
    "errorMessage": "Internal Error",
    "errorType": "Internal Error",
  },
  Object {
    "data": null,
    "errorInfo": null,
    "errorMessage": "Internal Error",
    "errorType": "Internal Error",
  },
]
`;

exports[`middleware Should succeed when response matches event in batches 1`] = `
Array [
  Object {
    "data": Object {
      "foo": "bar",
    },
  },
  Object {
    "data": Object {
      "biz": "baz",
    },
  },
]
`;

exports[`middleware Should wrap the response in an AppSync response object 1`] = `
Object {
  "data": Object {
    "field1": "foo",
    "field2": "bar",
  },
}
`;
